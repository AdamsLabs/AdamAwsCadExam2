AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy a VPC, subnets, route tables, DynamoDB table, and EC2 instances.

Parameters:
  Region:
    Description: "The AWS region to deploy to"
    Type: String
    Default: "us-west-2"
    AllowedValues:
      - us-west-2
      - ca-central-1
    ConstraintDescription: "must be a valid AWS region."

  AMIId:
    Description: "The AMI ID for the EC2 instances"
    Type: String
    Default: "ami-0eb9d67c52f5c80e5"
    ConstraintDescription: "must be a valid AMI ID."

Resources:
  # DynamoDB Table
  AdamDDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "adamddb"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # VPC
  AdamVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.50.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "adam-vpc"

  # Internet Gateway
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: "adam-igw"

  # Attach IGW to VPC
  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref AdamVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Route Table
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref AdamVPC
      Tags:
        - Key: Name
          Value: "adam-public-rt"

  # Public Route
  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Subnets
  Subnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref AdamVPC
      CidrBlock: "10.50.1.0/24"
      AvailabilityZone: !Sub "${AWS::Region}a"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "adam-subnet-1"

  Subnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref AdamVPC
      CidrBlock: "10.50.2.0/24"
      AvailabilityZone: !Sub "${AWS::Region}a"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "adam-subnet-2"

  Subnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref AdamVPC
      CidrBlock: "10.50.3.0/24"
      AvailabilityZone: !Sub "${AWS::Region}b"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "adam-subnet-3"

  Subnet4:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref AdamVPC
      CidrBlock: "10.50.4.0/24"
      AvailabilityZone: !Sub "${AWS::Region}b"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "adam-subnet-4"

  # Associate Subnets to Route Tables
  Subnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref PublicRouteTable

  Subnet3RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Subnet3
      RouteTableId: !Ref PublicRouteTable

  # Elastic IP for NAT Gateway
  ElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  # NAT Gateway
  NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref Subnet1
      Tags:
        - Key: Name
          Value: "adam-nat-gateway"

  # Private Route Table
  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref AdamVPC
      Tags:
        - Key: Name
          Value: "adam-private-rt"

  # Private Route
  PrivateRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway

  # Associate Subnets to Private Route Table
  Subnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref PrivateRouteTable

  Subnet4RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Subnet4
      RouteTableId: !Ref PrivateRouteTable

  # Security Group
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow SSH and HTTP access"
      VpcId: !Ref AdamVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: "adam-sg"

  # Public EC2 Instance
  PublicEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.micro"
      SubnetId: !Ref Subnet1
      SecurityGroupIds:
        - !Ref SecurityGroup
      ImageId: !Ref AMIId
      Tags:
        - Key: Name
          Value: "adam-public-ec2"

  # Private EC2 Instance
  PrivateEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.micro"
      SubnetId: !Ref Subnet2
      SecurityGroupIds:
        - !Ref SecurityGroup
      ImageId: !Ref AMIId
      Tags:
        - Key: Name
          Value: "adam-private-ec2"
